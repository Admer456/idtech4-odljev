/*
===========================================================================

Doom 3 GPL Source Code
Copyright (C) 2016 Johannes Ohlemacher (http://github.com/eXistence/fhDOOM)

This file is part of the Doom 3 GPL Source Code (?Doom 3 Source Code?).

Doom 3 Source Code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Doom 3 Source Code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Doom 3 Source Code.  If not, see <http://www.gnu.org/licenses/>.

In addition, the Doom 3 Source Code is also subject to certain additional terms. You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Doom 3 Source Code.  If not, please request a copy in writing from id Software at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.

===========================================================================
*/

#include "global.inc"

layout(	location = 0 ) in vec3 vertex_position;
layout(	location = 1 ) in vec2 vertex_texcoord;
layout(	location = 2 ) in vec3 vertex_normal;
layout(	location = 3 ) in vec4 vertex_color;
layout(	location = 4 ) in vec3 vertex_binormal;
layout(	location = 5 ) in vec3 vertex_tangent;

out vs_output
{
	vec4 color;
	vec3 L;
	vec3 V;
	vec3 H;
	vec2 texcoord;
} result;

void main(void)
{
	
	float waveOffsetY = cos(vertex_texcoord.y * 32.0);
	float waveOffsetX = sin(vertex_texcoord.x * 32.0);

	float angleOffset = shaderParm0.x;
	float angleOffset2 = shaderParm0.y * 0.5;
	float angleOffset3 = shaderParm0.z * 0.25;

	gl_Position = rpProjectionMatrix * rpModelViewMatrix * vec4(vertex_position, 1.0);
	result.color = vertex_color;
	result.texcoord = vertex_texcoord;
	
	result.texcoord.x += waveOffsetX * 0.015 * angleOffset;
	result.texcoord.y += waveOffsetY * 0.015 * angleOffset2;

	result.texcoord.xy += waveOffsetX * waveOffsetY * 0.023 * angleOffset3;

	mat3 M = mat3(vertex_tangent, vertex_binormal, vertex_normal);
	vec3 L = rpLocalLightOrigin.xyz - vertex_position.xyz;

	result.L = L * M;

	vec3 V = rpLocalViewOrigin.xyz - vertex_position.xyz;
	result.V = V * M;

	vec3 H = L + V;
	result.H = H * M;
}


vec2 transformTexCoord(vec2 texcoord, vec4 s, vec4 t);